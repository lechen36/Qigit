
from __future__ import print_function

from abc import ABCMeta, abstractmethod
import datetime
try:
    import Queue as queue
except ImportError:
    import queue

import numpy as np
import pandas as pd
from data import TSPro_DataHandler



class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars 
    (OHLCV) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to where the data came from,
    since it obtains the bar tuples from a queue object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")

class MACDPro_Strategy(Strategy):

    def __init__(self, bars,iSymbol): 
        """
        Initialises the buy and hold strategy.
        Parameters:
        bars - The DataHandler object that provides bar information 数据处理的类
        events - The Event Queue object. 事件
        short_window - The short moving average lookback.
        long_window - The long moving average lookback.
        """
        self.symbol = iSymbol
        self.analysis_dates=90
        self.bars = bars  #bars数据操作类
        self.value_list=['ts_code','trade_date','close','MACDXPre','ROC+1','ROC+2','ROC+3']
        self.data=self.bars.symbol_data
        self.signals= self.data[self.symbol][['trade_date','close']]  #历史的signal 信息
        self.signals.loc[:,'signals']=0 #dateframe:[trade_date,close,signals,return_rate_today,return_rate_cum]
        self.datetime=self.bars.get_latest_bar_datetime       
    
    def calculate_signals(self): #计算初始化的 买卖 方向 ，初始都是0:OUT  1:BUY
        self.bars.update_bars() #增加一条新的数据
        df_bars=self.bars.get_latest_bars_values(self.symbol,self.value_list,self.analysis_dates)
        if df_bars.loc[:,'MACDXPre'].iloc[-1]>=1: #看当前是否是MACDPre买点

            df_bars_select=df_bars[df_bars['MACDXPre']>=1]
            df_bars_select_success=df_bars_select[(df_bars_select['ROC+1']>1)|(df_bars_select['ROC+2']>1)|(df_bars_select['ROC+3']>2)] #把预测出金叉中后三天内上涨的画出来
            if len(df_bars_select)!=0:
                success_rate=len(df_bars_select_success)/len(df_bars_select)
            else:
                success_rate=0

            if success_rate>=0.5:
                self.signals.loc[:,'signals'].iloc[-1]=1
                
                




if __name__=='__main__':
    symbol_list=['000001.SZ']
    start_date='20180604'
    value_list=['ts_code','trade_date','close','MACDXPre','ROC+1','ROC+2','ROC+3']
    td=TSPro_DataHandler('/Users/mac/Qigit/symbol_data',symbol_list,start_date)
    
    iStrategy=MACDPro_Strategy(td,'000001.SZ')
    signals_hist=[]

    for i in range(3):
        iStrategy.calculate_signals()






   
        

   
        